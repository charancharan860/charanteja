Day-01[6=> 27-03-2021]:
=======================
	
	-> Python checking
		=> python -V
	-> pip checking
		=> pip --version
	
Django Installations:
===================== 
	-> wherever the path it is not manadatory to install django we can install it in any path
		
	-> pip install django => Updated django version will be installed into a system
		=> pip install django=="version number"
	
Django Version Checking:
========================
	-> django-admin --version
	-> python -m django --version
	-> python shell
		-> import django
		-> django.get_version()
		
Project Creation:
=================
	-> Just we need to select a drive where we need to create a project
	-> Navigate to that particular path location by using command prompt
	-> django-admin startproject "projectname"
	-> If project is created then we can observe the same project name and manage.py inside the project folder
	  
Project Execution:
==================
	-> First we need to navigate where manage.py is exists and then we need to enter into that particualr path location by using command prompt
	-> python manage.py runserver
		=> manage.py runserver
	-> If port numbers are blocked then we can change ports by using the command as 
		=> manage.py runserver "port number"
	-> If we run the server the nautomatically db.sqlite3 file will be created inside the project folder

Day-02[7=> 29-03-2021]:
=======================
	Project folder files:
	=====================
	- init -> just it will be considered as a python file
	- asgi -> asynchronous gate way interface it will be used in server deployent cases
	- wsgi -> Web Socket Gate way interface it will be used in sendin,receiving and status of online users
	- settings -> All configurations will be done here 
	- urls -> To check the url is present in this file to access the particular task

Carona => Project folder
	Carona => [Admin App]
	manage.py -> services
	
	index => [by default display some file]
	
Own .html file access:

User App Creation:
==================
	-> we need to enter into path where manage.py file exists then we need to pass the command to create an user app
		=> django-admin startapp "user appname"
		=> manage.py startapp "user appname"
	-> Carona => Project folder
		-> Carona => Admin App
		-> CSE_Status => User App
		-> manage.py
		-> db.sqlite3
-> UserApp Files:
=================
	- init -> It will be considered as a python file
	- admin -> To restrict the tables to be viewed for users like admin or guests
	- apps -> userfile configurations
	- test -> testing => unit, black box 
	- models -> All table creations can be done here => [Database] 
	- views -> All logics can be implemented in this file

UserApp:
========
	-> First step is to configure our app in settings.py file
	-> Navigate to line where Installed_apps exists
		INSTALLED_APPS = [
		'........',
		'UserApp Name',
		]
	
UserApp Execution:
==================	
	-> response can be accessed from userapp
	-> path:
	========
		path("userdefined url/",modulename.functionname,name="userdefined name),
	urls.py:
	========
	-> from CSE_Status import views
	-> path("demo/",views.sample),
	
	views.py:
	========
	-> from django.http import HttpResponse
	
	-> def sample(request):
			return HttpResponse("something message")
	
	
	url => views => Response

	MVC and MVT:
	============
	
	MVC Architecture:
	=================
	M -> Model [Database]
	V -> View [.html,js,jquery]
	C -> Controller [logic file .php, .java, .net]
	
	MVT Architecture:
	=================
	M -> Model [Database]
	V -> View [Controller => urls,views => logic]
	T -> Template [html,js,jquery][DTL => Django Template Language]

	path('url pathname/',modulename.functionname)
	
	path('demo/',views.sample)
	
	url: localhost:8000/demo/12
	
	Output:	Hello 12
	
	path('fah/<str:r>/,',views.drt)
	
	
	def drt(rq,r):
		return HttpResponse("Hello "+r)
	
	path('dr/<str:name>/<int:age>/',views.ft)
	
	
	def ft(q,age,name):
		return HttpResponse("Your name is: {}<br/>Your age is: {}".format(name,age))
		
	same format for other values that can be passed in url and accessed by using functions
	
	using Html tags:
	================
	HttpResponse("<h1>Hello Welcome</h1>">)
	
	Inline styling:
	===============
	HttpResponse("<h1 style='background-color:green;color:white'>Welcome Raju</h1>")
	
Day-03[8=> 30-03-2021]:
=======================
	Inline Javascript by using HttpResponse:
	========================================
	HttpResponse("<script>alert('Hi Welcome')</script>")
	
	Templates Folder Creation:
	==========================
		-> Templates folder should be created within your user app name the name should be only "templates"
		-> In this we should use only ".html files"
		-> To Access this we should use the own folder for .html files and need to render those files
		
		render():
		=========
		render(self parameter,".html file path location",dictionary format value to send data from views to html)
		
		 
		Ex:
		===
			return render(rt,'te/home.html',{'data':fr})

			return render(wt,'yu/about.html')
			
	Internal CSS
	=============
	-> This can be used only in html file within the head tag and this should be used by accessing style tag
	-> <head>
	<title></title>
	<style>
	form 
	{
		background-color: green;
		color:white;
	}
	</style>
	</head>

	Externl CSS:
	============
	-> We need to access the external files the nwe need to create a folder that is "Static" Folder
	-> Static Folder can access all external files such as .css,.js,.jpg,.mp3 etc.,
	-> To access all those files then we need to load those files by using the DTL 
	-> {% load static %} -> This line prefers to load all external files to that particular file
	-> To access the ony .css then we need to include the dtl to load those 
	example:
	========
	<link rel="stylesheet" href="{% static 'css/sample.css' %}">
	
	sample.css:
	===========
	label
	{
		text-align:center;
	}
	-> Here we need to mention the path of .css or external file in that we need to access all the file content to that particular file.
	


Day-04[9=> 30-03-2021]:
=======================

	-> Bootstrap for Html pages
	-> In bootstrap predefined classes are exists in bootstrap framework
		-> online-> Static folder -> X
		-> offline -> Static -> css,js,jquery
	
Day-5[10=> 01-04-2021]:
=======================

ORM:
..............

* from app.models import classname(in models)
* select * from table;
   insert()

* Object relational mapping

	-> 2 ways:
                   
                             classname.objects.create(fieldname="value")

		
	data= classname(filedname="value")
	data.save()
	-> accesing table data
		->all()
		->values()
		->values_list()
		->values(fieldname).get(fieldname)
		->get()
		->filter()
		->last()
		->first()
		->order_by()


age=23<     print(names)

age=20 print(name)

username len 10<  print(name)













